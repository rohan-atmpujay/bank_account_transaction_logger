from datetime import datetime

def transaction_logger(func):
    """Decorator to log transactions to a file"""
    def wrapper(self, amount, *args, **kwargs):
        # Get timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Get transaction type from function name
        transaction_type = "deposit" if func.__name__ == "deposit" else "withdrawal"
        
        # Call the original function
        result = func(self, amount, *args, **kwargs)
        
        # Log the transaction
        with open("transactions.log", "a") as f:
            log_entry = (f"[{timestamp}] {transaction_type.capitalize()}: "
                        f"${amount:.2f}, Balance: ${self.balance:.2f}\n")
            f.write(log_entry)
        
        return result
    return wrapper

class BankAccount:
    def __init__(self, account_holder, initial_balance=0):
        self.account_holder = account_holder
        self.balance = initial_balance
        print(f"Account created for {account_holder} with initial balance ${initial_balance:.2f}")

    @transaction_logger
    def deposit(self, amount):
        """Deposit money into the account"""
        if amount <= 0:
            raise ValueError("Deposit amount must be positive")
        self.balance += amount
        return self.balance

    @transaction_logger
    def withdraw(self, amount):
        """Withdraw money from the account"""
        if amount <= 0:
            raise ValueError("Withdrawal amount must be positive")
        if amount > self.balance:
            raise ValueError("Insufficient funds")
        self.balance -= amount
        return self.balance

    def get_balance(self):
        """Get current account balance"""
        return self.balance

# Example usage
if __name__ == "__main__":
    account = BankAccount("John Doe", 1000)
    
    try:
        account.deposit(500)
        account.withdraw(200)
        account.withdraw(1500)  # This will raise an error
    except ValueError as e:
        print(f"Error: {e}")
    
    print(f"Final balance: ${account.get_balance():.2f}")
